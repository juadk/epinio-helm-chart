{{ if not .Values.manifestSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: manifest
stringData:
  manifest.yaml: |
    ---
    {{ $registryUsername := default "admin" .Values.externalRegistryUsername -}}
    {{- $registryPassword := default (randAlphaNum 10) .Values.externalRegistryPassword -}}
    {{- $accessKey := randAlphaNum 16 -}}
    {{- $secretKey := randAlphaNum 16 -}}
    {{- $sessionKey := randAlphaNum 24 -}}
    {{- $password := randAlphaNum 12 -}}

    components:
      {{- if not .Values.skipLinkerd }}
      - id: linkerd
        type: yaml
        source:
          path: assets/installer/linkerd-job.yaml
        waitComplete:
          - type: "job"
            selector: "linkerd-install"
            namespace: linkerd
      {{ end }}

      {{- if not .Values.skipTraefik }}
      - id: traefik
        {{- if not .Values.skipLinkerd }}
        needs: linkerd
        {{- end }}
        namespace: traefik
        type: helm
        source:
          name: traefik
          url: {{ .Values.traefikChart | quote }}
        waitComplete:
          - type: "pod"
            selector: "app.kubernetes.io/name=traefik"
          - type: "loadbalancer"
            selector: "traefik"
        values:
          - name: globalArguments
            value: ""
          - name: "deployment.podAnnotations.linkerd\\.io/inject"
            value: "enabled"
          - name: "ports.web.redirectTo"
            value: "websecure"
          - name: "ingressClass.enabled"
            value: "true"
          - name: "ingressClass.isDefaultClass"
            value: "true"
          - name: "service.spec.loadBalancerIP"
            value: "{{ .Values.loadbalancerIP }}"
      {{ end }}

      - id: kubed
        namespace: kubed
        type: helm
        source:
          name: kubed
          path: assets/installer/kubed-v0.12.0.tgz

      {{- if not .Values.skipCertManager }}
      - id: cert-manager
        namespace: cert-manager
        type: helm
        source:
          name: cert-manager
          path: assets/installer/cert-manager-v1.5.4.tgz
        values:
          - name: "installCRDs"
            value: "true"
          - name: "extraArgs[0]"
            value: "--enable-certificate-owner-ref=true"
        waitComplete:
          - type: "pod"
            selector: "app.kubernetes.io/name=webhook"
            namespace: "cert-manager"
          - type: "pod"
            selector: "app.kubernetes.io/name=cainjector"
            namespace: "cert-manager"
          - type: "pod"
            selector: "app.kubernetes.io/name=cert-manager"
            namespace: "cert-manager"
      {{ end }}

      - id: namespace-tekton
        {{- if not .Values.skipLinkerd }}
        needs: linkerd
        {{- end }}
        type: namespace
        namespace: tekton
        values:
          - name: linkerd.io/inject
            value: enabled
            type: annotation

      - id: tekton
        needs: namespace-tekton
        type: yaml
        source:
          path: assets/installer/pipeline-v0.28.0.yaml
        waitComplete:
          - type: "pod"
            selector: "app=tekton-pipelines-webhook"
            namespace: tekton-pipelines
          - type: "crd"
            selector: "clustertasks.tekton.dev"
          - type: "crd"
            selector: "conditions.tekton.dev"

      - id: namespace-epinio
        {{- if not .Values.skipLinkerd }}
        needs: linkerd
        {{- end }}
        type: namespace
        namespace: epinio
        values:
          - name: linkerd.io/inject
            value: enabled
            type: annotation

      - id: epinio
        needs: namespace-epinio
        namespace: epinio
        type: helm
        source:
          name: epinio
          path: "{{ .Values.epinioChart }}"
        values:
          - name: email
            value: "{{ .Values.email }}"
          - name: "systemDomain"
            value: "{{ .Values.domain }}"
          - name: "api.username"
            value: {{ default "admin" .Values.user | quote }}
          - name: "api.password"
            value: {{ default $password .Values.password | quote }}
          - name:  "certManagerNamespace"
            value: cert-manager
          - name: "server.sessionKey"
            value: "{{ $sessionKey }}"
          - name: "server.accessControlAllowOrigin"
            value: {{ default "*" .Values.accessControlAllowOrigin | quote }}
          - name: "server.tlsIssuer"
            value: "{{ .Values.tlsIssuer }}"
          - name: "server.timeoutMultiplier"
            value: {{ .Values.server.timeoutMultiplier }}
          - name: "server.traceLevel"
            value: "{{ .Values.server.traceLevel }}"

          - name: "s3.endpoint"
            value: {{ default "minio.minio-epinio.svc.cluster.local" .Values.s3Endpoint | quote }}
          - name: "s3.bucket"
            value: {{ default "epinio" .Values.s3Bucket | quote }}
          - name: "s3.accessKeyID"
            value: {{ default $accessKey .Values.s3AccessKeyId | quote }}
          - name: "s3.secretAccessKey"
            value: {{ default $secretKey .Values.s3SecretAccessKey | quote }}
          - name: "s3.region"
            value: {{ default "" .Values.s3Location | quote }}
          - name: "s3.useSSL"
            value: {{ default "false" .Values.s3UseSSL | quote }}

          - name: "registry.url"
            value: {{ default (print "epinio-registry." .Values.domain)  .Values.externalRegistryURL | quote }}
          - name: "registry.localhostURL"
            value: "127.0.0.1:30500"
          - name: "registry.username"
            value: "{{ $registryUsername }}"
          - name: "registry.password"
            value: "{{ $registryPassword }}"
          - name: "registry.namespace"
            value: {{ default "apps" .Values.externalRegistryNamespace | quote }}
          {{- if not .Values.externalRegistryURL }}
          - name: "registry.certificateSecret"
            value: "epinio-registry-tls"
          - name: "registry.certificateSecretNamespace"
            value: "epinio-registry"
          {{- end }}
          - name: "server.forceKubeInternalRegistryTLS"
            value: {{ default "false" .Values.forceKubeInternalRegistryTLS | quote }}
        preDeploy:
          - type: "pod"
            selector: "app=tekton-pipelines-webhook"
            namespace: tekton-pipelines
          - type: "crd"
            selector: "clustertasks.tekton.dev"
          - type: "crd"
            selector: "conditions.tekton.dev"
          - type: "pod"
            selector: "app.kubernetes.io/name=webhook"
            namespace: "cert-manager"

      {{ if not .Values.externalRegistryURL -}}
      - id: namespace-registry
        {{- if not .Values.skipLinkerd }}
        needs: linkerd
        {{- end }}
        type: namespace
        namespace: epinio-registry
        values:
          - name: linkerd.io/inject
            value: enabled
            type: annotation

      - id: registry
        {{- if not .Values.skipCertManager }}
        needs: cert-manager
        {{- end }}
        namespace: epinio-registry
        type: helm
        source:
          name: epinio-registry
          path: {{ .Values.containerRegistryChart | quote }}
        values:
          - name: domain
            value: "epinio-registry.{{ .Values.domain }}"
          - name: "auth.htpasswd"
            # The only supported password format is bcrypt
            value: {{ htpasswd $registryUsername $registryPassword | quote }}
          - name: createNodePort
            value: "true"
          - name: tlsIssuer
            value: "{{ .Values.tlsIssuer }}"
        preDeploy:
          - type: "pod"
            selector: "app.kubernetes.io/name=webhook"
            namespace: cert-manager
          - type: "crd"
            selector: "certificates.cert-manager.io"
          - type: "crd"
            selector: "clusterissuers.cert-manager.io"
      {{ end }}

      {{- if not .Values.s3Endpoint }}
      - id: namespace-minio
        {{- if not .Values.skipLinkerd }}
        needs: linkerd
        {{- end }}
        type: namespace
        namespace: minio-epinio
        values:
          - name: linkerd.io/inject
            value: enabled
            type: annotation

      - id: minio
        needs: namespace-minio
        type: yaml
        source:
          path: assets/installer/minio-operator.yaml
        waitComplete:
          - type: "crd"
            selector: "tenants.minio.min.io"

      - id: minio-tenant
        needs: minio
        type: yaml
        source:
          path: assets/installer/minio-tenant.yaml
        values:
          - name: accessKey
            value: "{{ $accessKey }}"
          - name: secretKey
            value: "{{ $secretKey }}"
        waitComplete:
          - type: "pod"
            selector: "statefulset.kubernetes.io/pod-name=tenant1-ss-0-0"
            namespace: minio-epinio
      {{ end }}
{{ end }}
